Terminals unused in grammar

    T_NUM
    T_THEN


State 92 conflicts: 1 shift/reduce


Grammar

    0 $accept: program T_EOF

    1 program: stmt_list T_SEMICOLON

    2 stmt_list: stmt_list T_SEMICOLON stmt
    3          | stmt

    4 stmt: assignment
    5     | read
    6     | write
    7     | declaration
    8     | construct_while
    9     | construct_repeat
   10     | construct_if
   11     | block

   12 block: T_BEGIN stmt_list T_END

   13 $@1: %empty

   14 $@2: %empty

   15 construct_while: T_WHILE $@1 T_LPAR l_expr T_RPAR $@2 T_DO stmt

   16 $@3: %empty

   17 $@4: %empty

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL T_LPAR $@4 l_expr T_RPAR

   19 $@5: %empty

   20 $@6: %empty

   21 construct_if: T_IF T_LPAR l_expr T_RPAR $@5 stmt $@6 construct_else

   22 $@7: %empty

   23 construct_else: T_ELSE $@7 stmt
   24               | %empty

   25 l_expr: a_expr op_rel a_expr

   26 op_rel: T_LT
   27       | T_GT
   28       | T_LEQ
   29       | T_GEQ

   30 assignment: T_ID arr_index T_ASSIGN a_expr

   31 declaration: datatype T_ID array_size

   32 array_size: T_LS_BRACKET T_INTEGER T_RS_BRACKET
   33           | %empty

   34 datatype: T_DT_INT
   35         | T_DT_FLOAT

   36 a_expr: a_expr T_ADD a_term
   37       | a_expr T_SUB a_term
   38       | a_term

   39 a_term: a_term T_MUL a_fact
   40       | a_term T_DIV a_fact
   41       | a_fact

   42 a_fact: varref
   43       | T_INTEGER
   44       | T_FLOAT
   45       | '(' a_expr ')'
   46       | T_SUB a_fact
   47       | T_LITERAL_STR

   48 varref: T_ID arr_index

   49 arr_index: T_LS_BRACKET a_expr T_RS_BRACKET
   50          | %empty

   51 read: T_READ varlist

   52 write: T_WRITE expr_list

   53 varlist: varlist T_COMMA varref
   54        | varref

   55 expr_list: expr_list T_COMMA a_expr
   56          | a_expr


Terminals, with rules where they appear

    T_EOF (0) 0
    '(' (40) 45
    ')' (41) 45
    error (256)
    T_NUM (258)
    T_ASSIGN (259) 30
    T_ADD (260) 36
    T_SUB (261) 37 46
    T_MUL (262) 39
    T_DIV (263) 40
    T_DT_INT (264) 34
    T_DT_FLOAT (265) 35
    T_LITERAL_STR (266) 47
    T_READ (267) 51
    T_WRITE (268) 52
    T_SEMICOLON (269) 1 2
    T_COMMA (270) 53 55
    T_LS_BRACKET (271) 32 49
    T_RS_BRACKET (272) 32 49
    T_ID <string> (273) 30 31 48
    T_INTEGER <int> (274) 32 43
    T_FLOAT <float> (275) 44
    T_BEGIN (276) 12
    T_END (277) 12
    T_REPEAT (278) 18
    T_UNTIL (279) 18
    T_DO (280) 15
    T_WHILE (281) 15
    T_IF (282) 21
    T_THEN (283)
    T_ELSE (284) 23
    T_LPAR (285) 15 18 21
    T_RPAR (286) 15 18 21
    T_LT (287) 26
    T_GT (288) 27
    T_LEQ (289) 28
    T_GEQ (290) 29


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    stmt_list (40)
        on left: 2 3
        on right: 1 2 12 18
    stmt (41)
        on left: 4 5 6 7 8 9 10 11
        on right: 2 3 15 21 23
    block (42)
        on left: 12
        on right: 11
    construct_while (43)
        on left: 15
        on right: 8
    $@1 (44)
        on left: 13
        on right: 15
    $@2 (45)
        on left: 14
        on right: 15
    construct_repeat (46)
        on left: 18
        on right: 9
    $@3 (47)
        on left: 16
        on right: 18
    $@4 (48)
        on left: 17
        on right: 18
    construct_if (49)
        on left: 21
        on right: 10
    $@5 (50)
        on left: 19
        on right: 21
    $@6 (51)
        on left: 20
        on right: 21
    construct_else (52)
        on left: 23 24
        on right: 21
    $@7 (53)
        on left: 22
        on right: 23
    l_expr <symbol_t*> (54)
        on left: 25
        on right: 15 18 21
    op_rel <int> (55)
        on left: 26 27 28 29
        on right: 25
    assignment <symbol_t*> (56)
        on left: 30
        on right: 4
    declaration <int> (57)
        on left: 31
        on right: 7
    array_size <int> (58)
        on left: 32 33
        on right: 31
    datatype <int> (59)
        on left: 34 35
        on right: 31
    a_expr <symbol_t*> (60)
        on left: 36 37 38
        on right: 25 30 36 37 45 49 55 56
    a_term <symbol_t*> (61)
        on left: 39 40 41
        on right: 36 37 38 39 40
    a_fact <symbol_t*> (62)
        on left: 42 43 44 45 46 47
        on right: 39 40 41 46
    varref <symbol_t*> (63)
        on left: 48
        on right: 42 53 54
    arr_index <symbol_t*> (64)
        on left: 49 50
        on right: 30 48
    read (65)
        on left: 51
        on right: 5
    write (66)
        on left: 52
        on right: 6
    varlist <vector<symbol_t*> > (67)
        on left: 53 54
        on right: 51 53
    expr_list <vector<symbol_t*> > (68)
        on left: 55 56
        on right: 52 55


State 0

    0 $accept: . program T_EOF

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    program           go to state 10
    stmt_list         go to state 11
    stmt              go to state 12
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 1

   34 datatype: T_DT_INT .

    $default  reduce using rule 34 (datatype)


State 2

   35 datatype: T_DT_FLOAT .

    $default  reduce using rule 35 (datatype)


State 3

   51 read: T_READ . varlist

    T_ID  shift, and go to state 22

    varref   go to state 23
    varlist  go to state 24


State 4

   52 write: T_WRITE . expr_list

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr     go to state 30
    a_term     go to state 31
    a_fact     go to state 32
    varref     go to state 33
    expr_list  go to state 34


State 5

   30 assignment: T_ID . arr_index T_ASSIGN a_expr

    T_LS_BRACKET  shift, and go to state 35

    $default  reduce using rule 50 (arr_index)

    arr_index  go to state 36


State 6

   12 block: T_BEGIN . stmt_list T_END

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt_list         go to state 37
    stmt              go to state 12
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 7

   18 construct_repeat: T_REPEAT . $@3 stmt_list T_UNTIL T_LPAR $@4 l_expr T_RPAR

    $default  reduce using rule 16 ($@3)

    $@3  go to state 38


State 8

   15 construct_while: T_WHILE . $@1 T_LPAR l_expr T_RPAR $@2 T_DO stmt

    $default  reduce using rule 13 ($@1)

    $@1  go to state 39


State 9

   21 construct_if: T_IF . T_LPAR l_expr T_RPAR $@5 stmt $@6 construct_else

    T_LPAR  shift, and go to state 40


State 10

    0 $accept: program . T_EOF

    T_EOF  shift, and go to state 41


State 11

    1 program: stmt_list . T_SEMICOLON
    2 stmt_list: stmt_list . T_SEMICOLON stmt

    T_SEMICOLON  shift, and go to state 42


State 12

    3 stmt_list: stmt .

    $default  reduce using rule 3 (stmt_list)


State 13

   11 stmt: block .

    $default  reduce using rule 11 (stmt)


State 14

    8 stmt: construct_while .

    $default  reduce using rule 8 (stmt)


State 15

    9 stmt: construct_repeat .

    $default  reduce using rule 9 (stmt)


State 16

   10 stmt: construct_if .

    $default  reduce using rule 10 (stmt)


State 17

    4 stmt: assignment .

    $default  reduce using rule 4 (stmt)


State 18

    7 stmt: declaration .

    $default  reduce using rule 7 (stmt)


State 19

   31 declaration: datatype . T_ID array_size

    T_ID  shift, and go to state 43


State 20

    5 stmt: read .

    $default  reduce using rule 5 (stmt)


State 21

    6 stmt: write .

    $default  reduce using rule 6 (stmt)


State 22

   48 varref: T_ID . arr_index

    T_LS_BRACKET  shift, and go to state 35

    $default  reduce using rule 50 (arr_index)

    arr_index  go to state 44


State 23

   54 varlist: varref .

    $default  reduce using rule 54 (varlist)


State 24

   51 read: T_READ varlist .
   53 varlist: varlist . T_COMMA varref

    T_COMMA  shift, and go to state 45

    $default  reduce using rule 51 (read)


State 25

   46 a_fact: T_SUB . a_fact

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_fact  go to state 46
    varref  go to state 33


State 26

   47 a_fact: T_LITERAL_STR .

    $default  reduce using rule 47 (a_fact)


State 27

   43 a_fact: T_INTEGER .

    $default  reduce using rule 43 (a_fact)


State 28

   44 a_fact: T_FLOAT .

    $default  reduce using rule 44 (a_fact)


State 29

   45 a_fact: '(' . a_expr ')'

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr  go to state 47
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 30

   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term
   56 expr_list: a_expr .

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49

    $default  reduce using rule 56 (expr_list)


State 31

   38 a_expr: a_term .
   39 a_term: a_term . T_MUL a_fact
   40       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 50
    T_DIV  shift, and go to state 51

    $default  reduce using rule 38 (a_expr)


State 32

   41 a_term: a_fact .

    $default  reduce using rule 41 (a_term)


State 33

   42 a_fact: varref .

    $default  reduce using rule 42 (a_fact)


State 34

   52 write: T_WRITE expr_list .
   55 expr_list: expr_list . T_COMMA a_expr

    T_COMMA  shift, and go to state 52

    $default  reduce using rule 52 (write)


State 35

   49 arr_index: T_LS_BRACKET . a_expr T_RS_BRACKET

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr  go to state 53
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 36

   30 assignment: T_ID arr_index . T_ASSIGN a_expr

    T_ASSIGN  shift, and go to state 54


State 37

    2 stmt_list: stmt_list . T_SEMICOLON stmt
   12 block: T_BEGIN stmt_list . T_END

    T_SEMICOLON  shift, and go to state 55
    T_END        shift, and go to state 56


State 38

   18 construct_repeat: T_REPEAT $@3 . stmt_list T_UNTIL T_LPAR $@4 l_expr T_RPAR

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt_list         go to state 57
    stmt              go to state 12
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 39

   15 construct_while: T_WHILE $@1 . T_LPAR l_expr T_RPAR $@2 T_DO stmt

    T_LPAR  shift, and go to state 58


State 40

   21 construct_if: T_IF T_LPAR . l_expr T_RPAR $@5 stmt $@6 construct_else

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    l_expr  go to state 59
    a_expr  go to state 60
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 41

    0 $accept: program T_EOF .

    $default  accept


State 42

    1 program: stmt_list T_SEMICOLON .
    2 stmt_list: stmt_list T_SEMICOLON . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    $default  reduce using rule 1 (program)

    stmt              go to state 61
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 43

   31 declaration: datatype T_ID . array_size

    T_LS_BRACKET  shift, and go to state 62

    $default  reduce using rule 33 (array_size)

    array_size  go to state 63


State 44

   48 varref: T_ID arr_index .

    $default  reduce using rule 48 (varref)


State 45

   53 varlist: varlist T_COMMA . varref

    T_ID  shift, and go to state 22

    varref  go to state 64


State 46

   46 a_fact: T_SUB a_fact .

    $default  reduce using rule 46 (a_fact)


State 47

   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term
   45 a_fact: '(' a_expr . ')'

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49
    ')'    shift, and go to state 65


State 48

   36 a_expr: a_expr T_ADD . a_term

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_term  go to state 66
    a_fact  go to state 32
    varref  go to state 33


State 49

   37 a_expr: a_expr T_SUB . a_term

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_term  go to state 67
    a_fact  go to state 32
    varref  go to state 33


State 50

   39 a_term: a_term T_MUL . a_fact

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_fact  go to state 68
    varref  go to state 33


State 51

   40 a_term: a_term T_DIV . a_fact

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_fact  go to state 69
    varref  go to state 33


State 52

   55 expr_list: expr_list T_COMMA . a_expr

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr  go to state 70
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 53

   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term
   49 arr_index: T_LS_BRACKET a_expr . T_RS_BRACKET

    T_ADD         shift, and go to state 48
    T_SUB         shift, and go to state 49
    T_RS_BRACKET  shift, and go to state 71


State 54

   30 assignment: T_ID arr_index T_ASSIGN . a_expr

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr  go to state 72
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 55

    2 stmt_list: stmt_list T_SEMICOLON . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt              go to state 61
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 56

   12 block: T_BEGIN stmt_list T_END .

    $default  reduce using rule 12 (block)


State 57

    2 stmt_list: stmt_list . T_SEMICOLON stmt
   18 construct_repeat: T_REPEAT $@3 stmt_list . T_UNTIL T_LPAR $@4 l_expr T_RPAR

    T_SEMICOLON  shift, and go to state 55
    T_UNTIL      shift, and go to state 73


State 58

   15 construct_while: T_WHILE $@1 T_LPAR . l_expr T_RPAR $@2 T_DO stmt

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    l_expr  go to state 74
    a_expr  go to state 60
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 59

   21 construct_if: T_IF T_LPAR l_expr . T_RPAR $@5 stmt $@6 construct_else

    T_RPAR  shift, and go to state 75


State 60

   25 l_expr: a_expr . op_rel a_expr
   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49
    T_LT   shift, and go to state 76
    T_GT   shift, and go to state 77
    T_LEQ  shift, and go to state 78
    T_GEQ  shift, and go to state 79

    op_rel  go to state 80


State 61

    2 stmt_list: stmt_list T_SEMICOLON stmt .

    $default  reduce using rule 2 (stmt_list)


State 62

   32 array_size: T_LS_BRACKET . T_INTEGER T_RS_BRACKET

    T_INTEGER  shift, and go to state 81


State 63

   31 declaration: datatype T_ID array_size .

    $default  reduce using rule 31 (declaration)


State 64

   53 varlist: varlist T_COMMA varref .

    $default  reduce using rule 53 (varlist)


State 65

   45 a_fact: '(' a_expr ')' .

    $default  reduce using rule 45 (a_fact)


State 66

   36 a_expr: a_expr T_ADD a_term .
   39 a_term: a_term . T_MUL a_fact
   40       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 50
    T_DIV  shift, and go to state 51

    $default  reduce using rule 36 (a_expr)


State 67

   37 a_expr: a_expr T_SUB a_term .
   39 a_term: a_term . T_MUL a_fact
   40       | a_term . T_DIV a_fact

    T_MUL  shift, and go to state 50
    T_DIV  shift, and go to state 51

    $default  reduce using rule 37 (a_expr)


State 68

   39 a_term: a_term T_MUL a_fact .

    $default  reduce using rule 39 (a_term)


State 69

   40 a_term: a_term T_DIV a_fact .

    $default  reduce using rule 40 (a_term)


State 70

   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term
   55 expr_list: expr_list T_COMMA a_expr .

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49

    $default  reduce using rule 55 (expr_list)


State 71

   49 arr_index: T_LS_BRACKET a_expr T_RS_BRACKET .

    $default  reduce using rule 49 (arr_index)


State 72

   30 assignment: T_ID arr_index T_ASSIGN a_expr .
   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49

    $default  reduce using rule 30 (assignment)


State 73

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL . T_LPAR $@4 l_expr T_RPAR

    T_LPAR  shift, and go to state 82


State 74

   15 construct_while: T_WHILE $@1 T_LPAR l_expr . T_RPAR $@2 T_DO stmt

    T_RPAR  shift, and go to state 83


State 75

   21 construct_if: T_IF T_LPAR l_expr T_RPAR . $@5 stmt $@6 construct_else

    $default  reduce using rule 19 ($@5)

    $@5  go to state 84


State 76

   26 op_rel: T_LT .

    $default  reduce using rule 26 (op_rel)


State 77

   27 op_rel: T_GT .

    $default  reduce using rule 27 (op_rel)


State 78

   28 op_rel: T_LEQ .

    $default  reduce using rule 28 (op_rel)


State 79

   29 op_rel: T_GEQ .

    $default  reduce using rule 29 (op_rel)


State 80

   25 l_expr: a_expr op_rel . a_expr

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    a_expr  go to state 85
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 81

   32 array_size: T_LS_BRACKET T_INTEGER . T_RS_BRACKET

    T_RS_BRACKET  shift, and go to state 86


State 82

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL T_LPAR . $@4 l_expr T_RPAR

    $default  reduce using rule 17 ($@4)

    $@4  go to state 87


State 83

   15 construct_while: T_WHILE $@1 T_LPAR l_expr T_RPAR . $@2 T_DO stmt

    $default  reduce using rule 14 ($@2)

    $@2  go to state 88


State 84

   21 construct_if: T_IF T_LPAR l_expr T_RPAR $@5 . stmt $@6 construct_else

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt              go to state 89
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 85

   25 l_expr: a_expr op_rel a_expr .
   36 a_expr: a_expr . T_ADD a_term
   37       | a_expr . T_SUB a_term

    T_ADD  shift, and go to state 48
    T_SUB  shift, and go to state 49

    $default  reduce using rule 25 (l_expr)


State 86

   32 array_size: T_LS_BRACKET T_INTEGER T_RS_BRACKET .

    $default  reduce using rule 32 (array_size)


State 87

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL T_LPAR $@4 . l_expr T_RPAR

    T_SUB          shift, and go to state 25
    T_LITERAL_STR  shift, and go to state 26
    T_ID           shift, and go to state 22
    T_INTEGER      shift, and go to state 27
    T_FLOAT        shift, and go to state 28
    '('            shift, and go to state 29

    l_expr  go to state 90
    a_expr  go to state 60
    a_term  go to state 31
    a_fact  go to state 32
    varref  go to state 33


State 88

   15 construct_while: T_WHILE $@1 T_LPAR l_expr T_RPAR $@2 . T_DO stmt

    T_DO  shift, and go to state 91


State 89

   21 construct_if: T_IF T_LPAR l_expr T_RPAR $@5 stmt . $@6 construct_else

    $default  reduce using rule 20 ($@6)

    $@6  go to state 92


State 90

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL T_LPAR $@4 l_expr . T_RPAR

    T_RPAR  shift, and go to state 93


State 91

   15 construct_while: T_WHILE $@1 T_LPAR l_expr T_RPAR $@2 T_DO . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt              go to state 94
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 92

   21 construct_if: T_IF T_LPAR l_expr T_RPAR $@5 stmt $@6 . construct_else

    T_ELSE  shift, and go to state 95

    T_ELSE    [reduce using rule 24 (construct_else)]
    $default  reduce using rule 24 (construct_else)

    construct_else  go to state 96


State 93

   18 construct_repeat: T_REPEAT $@3 stmt_list T_UNTIL T_LPAR $@4 l_expr T_RPAR .

    $default  reduce using rule 18 (construct_repeat)


State 94

   15 construct_while: T_WHILE $@1 T_LPAR l_expr T_RPAR $@2 T_DO stmt .

    $default  reduce using rule 15 (construct_while)


State 95

   23 construct_else: T_ELSE . $@7 stmt

    $default  reduce using rule 22 ($@7)

    $@7  go to state 97


State 96

   21 construct_if: T_IF T_LPAR l_expr T_RPAR $@5 stmt $@6 construct_else .

    $default  reduce using rule 21 (construct_if)


State 97

   23 construct_else: T_ELSE $@7 . stmt

    T_DT_INT    shift, and go to state 1
    T_DT_FLOAT  shift, and go to state 2
    T_READ      shift, and go to state 3
    T_WRITE     shift, and go to state 4
    T_ID        shift, and go to state 5
    T_BEGIN     shift, and go to state 6
    T_REPEAT    shift, and go to state 7
    T_WHILE     shift, and go to state 8
    T_IF        shift, and go to state 9

    stmt              go to state 98
    block             go to state 13
    construct_while   go to state 14
    construct_repeat  go to state 15
    construct_if      go to state 16
    assignment        go to state 17
    declaration       go to state 18
    datatype          go to state 19
    read              go to state 20
    write             go to state 21


State 98

   23 construct_else: T_ELSE $@7 stmt .

    $default  reduce using rule 23 (construct_else)
